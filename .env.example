APP_HOST=localhost
APP_PORT=8000
# WebSocket logging server port (default: 9000 if not specified)
# SECURITY: In production, this port should be firewalled to only allow connections from
# trusted networks or specific IP addresses using iptables, firewalld, or cloud security groups.
# Example iptables rule (allow internal network only):
#   iptables -A INPUT -p tcp --dport 9000 -s 10.0.0.0/8 -j ACCEPT
#   iptables -A INPUT -p tcp --dport 9000 -j DROP
# The WebSocket logging endpoint is available at ws://localhost:APP_WS_PORT/logs
APP_WS_PORT=9000
MAX_AGE=604800
REDIS_URL=redis://127.0.0.1:6379
SESSION_SECRET_KEY=your-secret-key-here-change-in-production
# For Postgres
DATABASE_URL=postgres://user:password@localhost/rust_rest_api_db
# For SQLite (commented out)
# DATABASE_URL_SQLITE=
# Log streaming configuration (WebSocket-based, see /api/ws/logs)
# ENABLE_LOG_STREAM=true (deprecated - use WebSocket endpoint /api/ws/logs instead)
# LOG_FILE=./app.log (deprecated - WebSocket logging is now the default)
JWT_SECRET=your-super-secret-jwt-key-here
# CORS configuration: Comma-separated list of allowed origins for WebSocket and HTTP requests
# SECURITY: In production, explicitly list only trusted origins. Do NOT use wildcards.
# The WebSocket server will validate Origin headers against this list to prevent CSWSH attacks.
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
CORS_ALLOW_CREDENTIALS=false
# Environment: 'production' or 'development' (default: development)
# In production: origin validation is enforced, CORS is more restrictive, only configured origins allowed
# In development: more lenient with known development origins, but origin validation can be enforced with ENFORCE_ORIGIN_VALIDATION=true
APP_ENV=development
# SECURITY: Set to 'true' to enforce strict origin validation even in development environments
# ENFORCE_ORIGIN_VALIDATION=false
# Log level filter (used by tracing subscriber) - options: trace, debug, info, warn, error
RUST_LOG=info
# WebSocket logging buffer size - number of log messages to keep in memory (default: 1000)
WS_LOG_BUFFER_SIZE=1000
# WebSocket logging output format - options: text, json (default: text)
WS_LOG_FORMAT=text
# WebSocket logging authorization - comma-separated list of user IDs allowed to access logs
# If not set or empty, any valid JWT token holder can access WebSocket logs
# SECURITY: It is strongly recommended to set this in production to restrict access to authorized admins only
# Example: WS_LOGS_ADMIN_USER=admin@example.com,ops-user1,ops-user2
# Leave unset or empty to allow any authenticated user
# WS_LOGS_ADMIN_USER=

# OPERATIONAL SAFEGUARDS FOR WEBSOCKET LOGGING
# These settings protect against resource exhaustion and connection abuse

# Maximum number of concurrent WebSocket connections allowed globally (default: 1000)
# When this limit is reached, new connection attempts return 503 Service Unavailable
# RECOMMENDATION: Set this based on your server's capacity. Monitor active connections via logs.
# WS_MAX_GLOBAL_CONNECTIONS=1000

# Idle timeout for WebSocket connections in seconds (default: 300 = 5 minutes)
# Connections with no activity (client messages or log messages) for this duration are closed
# This prevents resource leaks from idle clients and frees up server capacity
# RECOMMENDATION: Set to 300-600 seconds (5-10 minutes) in production
# WS_IDLE_TIMEOUT_SECS=300

# 32-byte Base64-encoded key for cursor encryption (generate with: openssl rand -base64 32)
CURSOR_ENCRYPTION_KEY=CHANGEME-generate-with-openssl-rand-base64-32
